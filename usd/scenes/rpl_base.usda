#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (6.802320697460988, 6.56471477598786, 3.962039938445528)
                double3 target = (7.2513095173224995, -6.4865665767626455, 2.1327721714674626)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./rpl_base.usda"
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            bool "rtx:directLighting:sampledLighting:enabled" = 1
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            bool "rtx:hydra:faceCulling:enabled" = 1
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 1
    startTimeCode = 0
    subLayers = [
        @../materials/rpl.usda@,
        @../materials/common.usda@,
        @../../cad/rooms/rpl/2_export/rpl.usdc@
    ]
    timeCodesPerSecond = 24
    upAxis = "Z"
)

def Xform "World"
{
    def Xform "LightContainer"
    {
        token ui:displayGroup = "Material Graphs"
        token ui:displayName = "LightContainer"
        int ui:order = 1024
        token visibility = "inherited"
        float3 xformOp:rotateXYZ = (90, -0, -90)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def RectLight "RectLight" (
            apiSchemas = ["ShapingAPI"]
        )
        {
            color3f color = (1, 1, 1)
            float colorTemperature = 6000
            bool enableColorTemperature = 1
            float exposure = 0
            float height = 0.2
            float intensity = 80000
            bool light:enableCaustics = 0
            bool normalize = 0
            float shaping:cone:angle = 180
            float shaping:cone:softness = 1.5
            float shaping:focus = 0.05
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "inherited"
            bool visibleInPrimaryRay = 1
            float width = 1.25
            quatd xformOp:orient = (-0.7071067811865475, 0.7071067811865476, 1.2266347333466978e-17, -1.349298206681369e-16)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1.9799999999999995, 5.311, -1.7600000000000005)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RectLight "RectLight_01" (
            apiSchemas = ["ShapingAPI"]
        )
        {
            color3f color = (1, 1, 1)
            float colorTemperature = 6000
            bool enableColorTemperature = 1
            float exposure = 0
            float height = 0.2
            float intensity = 80000
            bool light:enableCaustics = 0
            bool normalize = 0
            float shaping:cone:angle = 180
            float shaping:cone:softness = 1.5
            float shaping:focus = 0.05
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "inherited"
            bool visibleInPrimaryRay = 1
            float width = 1.25
            quatd xformOp:orient = (-0.7071067811865475, 0.7071067811865476, 1.2266347333466978e-17, -1.349298206681369e-16)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (6.35, 5.311, -1.7600000000000013)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RectLight "RectLight_02" (
            apiSchemas = ["ShapingAPI"]
        )
        {
            color3f color = (1, 1, 1)
            float colorTemperature = 6000
            bool enableColorTemperature = 1
            float exposure = 0
            float height = 0.2
            float intensity = 80000
            bool light:enableCaustics = 0
            bool normalize = 0
            float shaping:cone:angle = 180
            float shaping:cone:softness = 1.5
            float shaping:focus = 0.05
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "inherited"
            bool visibleInPrimaryRay = 1
            float width = 1.25
            quatd xformOp:orient = (-0.7071067811865475, 0.7071067811865476, 1.2266347333466978e-17, -1.349298206681369e-16)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1.9799999999999993, 5.311, -5.3)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RectLight "RectLight_03" (
            apiSchemas = ["ShapingAPI"]
        )
        {
            color3f color = (1, 1, 1)
            float colorTemperature = 6000
            bool enableColorTemperature = 1
            float exposure = 0
            float height = 0.2
            float intensity = 80000
            bool light:enableCaustics = 0
            bool normalize = 0
            float shaping:cone:angle = 180
            float shaping:cone:softness = 1.5
            float shaping:focus = 0.05
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "inherited"
            bool visibleInPrimaryRay = 1
            float width = 1.25
            quatd xformOp:orient = (-0.7071067811865475, 0.7071067811865476, 1.2266347333466978e-17, -1.349298206681369e-16)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (6.349999999999999, 5.311, -5.300000000000002)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RectLight "RectLight_04" (
            apiSchemas = ["ShapingAPI"]
        )
        {
            color3f color = (1, 1, 1)
            float colorTemperature = 6000
            bool enableColorTemperature = 1
            float exposure = 0
            float height = 0.2
            float intensity = 80000
            bool light:enableCaustics = 0
            bool normalize = 0
            float shaping:cone:angle = 180
            float shaping:cone:softness = 1.5
            float shaping:focus = 0.05
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "inherited"
            bool visibleInPrimaryRay = 1
            float width = 1.25
            quatd xformOp:orient = (-0.7071067811865475, 0.7071067811865476, 1.2266347333466978e-17, -1.349298206681369e-16)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1.9799999999999984, 5.311, -8.84)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RectLight "RectLight_05" (
            apiSchemas = ["ShapingAPI"]
        )
        {
            color3f color = (1, 1, 1)
            float colorTemperature = 6000
            bool enableColorTemperature = 1
            float exposure = 0
            float height = 0.2
            float intensity = 80000
            bool light:enableCaustics = 0
            bool normalize = 0
            float shaping:cone:angle = 180
            float shaping:cone:softness = 1.5
            float shaping:focus = 0.05
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "inherited"
            bool visibleInPrimaryRay = 1
            float width = 1.25
            quatd xformOp:orient = (-0.7071067811865475, 0.7071067811865476, 1.2266347333466978e-17, -1.349298206681369e-16)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (6.349999999999998, 5.311, -8.840000000000002)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RectLight "RectLight_06" (
            apiSchemas = ["ShapingAPI"]
        )
        {
            color3f color = (1, 1, 1)
            float colorTemperature = 6000
            bool enableColorTemperature = 1
            float exposure = 0
            float height = 0.2
            float intensity = 80000
            bool light:enableCaustics = 0
            bool normalize = 0
            float shaping:cone:angle = 180
            float shaping:cone:softness = 1.5
            float shaping:focus = 0.05
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "inherited"
            bool visibleInPrimaryRay = 1
            float width = 1.25
            quatd xformOp:orient = (-0.7071067811865475, 0.7071067811865476, 1.2266347333466978e-17, -1.349298206681369e-16)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (10.719999999999999, 5.311, -8.840000000000002)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RectLight "RectLight_07" (
            apiSchemas = ["ShapingAPI"]
        )
        {
            color3f color = (1, 1, 1)
            float colorTemperature = 6000
            bool enableColorTemperature = 1
            float exposure = 0
            float height = 0.2
            float intensity = 80000
            bool light:enableCaustics = 0
            bool normalize = 0
            float shaping:cone:angle = 180
            float shaping:cone:softness = 1.5
            float shaping:focus = 0.05
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "inherited"
            bool visibleInPrimaryRay = 1
            float width = 1.25
            quatd xformOp:orient = (-0.7071067811865475, 0.7071067811865476, 1.2266347333466978e-17, -1.349298206681369e-16)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1.9799999999999978, 5.311, -12.38)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RectLight "RectLight_08" (
            apiSchemas = ["ShapingAPI"]
        )
        {
            color3f color = (1, 1, 1)
            float colorTemperature = 6000
            bool enableColorTemperature = 1
            float exposure = 0
            float height = 0.2
            float intensity = 80000
            bool light:enableCaustics = 0
            bool normalize = 0
            float shaping:cone:angle = 180
            float shaping:cone:softness = 1.5
            float shaping:focus = 0.05
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "inherited"
            bool visibleInPrimaryRay = 1
            float width = 1.25
            quatd xformOp:orient = (-0.7071067811865475, 0.7071067811865476, 1.2266347333466978e-17, -1.349298206681369e-16)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (6.349999999999997, 5.311, -12.380000000000003)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RectLight "RectLight_09" (
            apiSchemas = ["ShapingAPI"]
        )
        {
            color3f color = (1, 1, 1)
            float colorTemperature = 6000
            bool enableColorTemperature = 1
            float exposure = 0
            float height = 0.2
            float intensity = 80000
            bool light:enableCaustics = 0
            bool normalize = 0
            float shaping:cone:angle = 180
            float shaping:cone:softness = 1.5
            float shaping:focus = 0.05
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "inherited"
            bool visibleInPrimaryRay = 1
            float width = 1.25
            quatd xformOp:orient = (-0.7071067811865475, 0.7071067811865476, 1.2266347333466978e-17, -1.349298206681369e-16)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (10.719999999999997, 5.311, -12.380000000000003)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RectLight "RectLight_10" (
            apiSchemas = ["ShapingAPI"]
        )
        {
            color3f color = (1, 1, 1)
            float colorTemperature = 6000
            bool enableColorTemperature = 1
            float exposure = 0
            float height = 0.2
            float intensity = 80000
            bool light:enableCaustics = 0
            bool normalize = 0
            float shaping:cone:angle = 180
            float shaping:cone:softness = 1.5
            float shaping:focus = 0.05
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "inherited"
            bool visibleInPrimaryRay = 1
            float width = 1.25
            quatd xformOp:orient = (-0.7071067811865475, 0.7071067811865476, 1.2266347333466978e-17, -1.349298206681369e-16)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (13.489999999999998, 5.311, -11.200000000000003)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RectLight "RectLight_11" (
            apiSchemas = ["ShapingAPI"]
        )
        {
            color3f color = (1, 1, 1)
            float colorTemperature = 6000
            bool enableColorTemperature = 1
            float exposure = 0
            float height = 0.2
            float intensity = 80000
            bool light:enableCaustics = 0
            bool normalize = 0
            float shaping:cone:angle = 180
            float shaping:cone:softness = 1.5
            float shaping:focus = 0.05
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "inherited"
            bool visibleInPrimaryRay = 1
            float width = 1.25
            quatd xformOp:orient = (-0.7071067811865475, 0.7071067811865476, 1.2266347333466978e-17, -1.349298206681369e-16)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (13.489999999999998, 5.311, -7.660000000000003)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    over "BaseWalls"
    {
        over "BaseWalls_mesh"
        {
            rel material:binding = </World/Looks/rpl/rpl_wall_paint_gray> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool singleSided = 1
        }
    }

    over "Roof"
    {
        over "Roof_mesh"
        {
            rel material:binding = </World/Looks/rpl/rpl_ceiling> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool singleSided = 1
        }
    }

    over "ConcreteLow"
    {
        over "ConcreteLow_mesh"
        {
            rel material:binding = </World/Looks/rpl/rpl_wall_concrete_low> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool singleSided = 1
        }
    }

    over "ConcreteHigh"
    {
        over "ConcreteHigh_mesh"
        {
            rel material:binding = </World/Looks/rpl/rpl_wall_concrete_high> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool singleSided = 1
        }
    }

    over "OrangePipes"
    {
        over "OrangePipes_mesh"
        {
            rel material:binding = </World/Looks/rpl/rpl_pipe_orange> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool singleSided = 1
        }
    }

    over "Floor"
    {
        over "Floor_mesh"
        {
            rel material:binding = </World/Looks/rpl/rpl_floor> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool singleSided = 1
        }
    }

    over "ElectricalPipes"
    {
        over "ElectricalPipes_mesh"
        {
            rel material:binding = </World/Looks/rpl/rpl_electrical> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool singleSided = 1
        }
    }

    over "DuctPipes"
    {
        over "DuctPipes_mesh"
        {
            rel material:binding = </World/Looks/rpl/rpl_duct_vent> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool singleSided = 1
        }
    }

    over "Ducts"
    {
        over "Ducts_mesh"
        {
            rel material:binding = </World/Looks/rpl/rpl_duct> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool singleSided = 1
        }
    }

    over "Columns"
    {
        over "Columns_mesh"
        {
            rel material:binding = </World/Looks/rpl/rpl_column> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool singleSided = 1
        }
    }

    over "CeilingStruts"
    {
        over "CeilingStruts_mesh"
        {
            rel material:binding = </World/Looks/rpl/rpl_bar_green> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool singleSided = 1
        }
    }

    over "Ledge"
    {
        over "Ledge_mesh"
        {
            rel material:binding = </World/Looks/rpl/rpl_wall_paint_gray> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool singleSided = 1
        }
    }

    over "Lights"
    {
        over "Lights_mesh"
        {
            bool singleSided = 1
        }
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float angle = 1
        float intensity = 3000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

