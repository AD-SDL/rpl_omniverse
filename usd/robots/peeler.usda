#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (-0.5107388545693705, 0.9017816580363, 0.8151568765038723)
                double3 target = (-0.008818810136065447, 0.03845018069173767, 0.14013000765418726)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./peeler.usda"
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 1
    startTimeCode = 0
    subLayers = [
        @../materials/peeler.usda@,
        @../materials/common.usda@,
        @../../cad/robots/peeler/2_export/peeler.usdc@
    ]
    timeCodesPerSecond = 24
    upAxis = "Z"
)

def Xform "World"
{
    over "shroud"
    {
        over "shroud_mesh"
        {
            rel material:binding = </World/Looks/peeler/peeler_body_blue> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "inherited"
        }
    }

    over "glass"
    {
        over "glass_mesh"
        {
            rel material:binding = </World/Looks/peeler/peeler_glass> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "inherited"
        }
    }

    over "peeler_plate"
    {
        over "peeler_plate_mesh"
        {
            rel material:binding = </World/Looks/common/white> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "inherited"
        }
    }

    over "frame"
    {
        over "frame_mesh"
        {
            rel material:binding = </World/Looks/peeler/peeler_body_gray> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "inherited"
        }
    }

    over "screen"
    {
        over "screen_mesh"
        {
            rel material:binding = </World/Looks/peeler/peeler_screen> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "inherited"
        }
    }

    over "tray"
    {
        over "tray_mesh"
        {
            rel material:binding = </World/Looks/common/black_glossy> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "inherited"
        }
    }

    over "logo"
    {
        over "logo_mesh"
        {
            rel material:binding = </World/Looks/common/black> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "inherited"
        }
    }

    over "screen_cover"
    {
        over "screen_cover_mesh"
        {
            rel material:binding = </World/Looks/common/white> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "inherited"
        }
    }

    over "feet"
    {
        over "feet_mesh"
        {
            rel material:binding = </World/Looks/common/black> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float angle = 1
        float intensity = 3000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

