#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (-0.91919657204222, 1.3155422516545943, 0.7649836312558849)
                double3 target = (0.01916164033496459, 0.07102719811508829, 0.1487313975017618)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./mir250.usda"
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 1
    startTimeCode = 0
    subLayers = [
        @../materials/common.usda@,
        @../../cad/robots/mir/2_export/mir250.usdc@
    ]
    timeCodesPerSecond = 24
    upAxis = "Z"
)

def Xform "World"
{
    over "wheel_front_right"
    {
        over "wheel_front_right_mesh"
        {
            rel material:binding = </World/Looks/common/black> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }
    }

    over "wheel_front_left"
    {
        over "wheel_front_left_mesh"
        {
            rel material:binding = </World/Looks/common/black> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }
    }

    over "wheel_back_right"
    {
        over "wheel_back_right_mesh"
        {
            rel material:binding = </World/Looks/common/black> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }
    }

    over "wheel_back_left"
    {
        over "wheel_back_left_mesh"
        {
            rel material:binding = </World/Looks/common/black> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }
    }

    over "base"
    {
        over "base_mesh"
        {
            rel material:binding = </World/Looks/common/gray> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }
    }

    def RectLight "RectLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        color3f color = (0, 0.63106155, 1)
        float height = 1
        float intensity = 15000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        float width = 1
        quatd xformOp:orient = (0.9996573249755574, 0, 0.026176948307869683, 0)
        double3 xformOp:scale = (0.03, 0.41, 1)
        double3 xformOp:translate = (-0.24367124183215902, 0, 0.2139308634521206)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def RectLight "RectLight_01" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        color3f color = (0, 0.63106155, 1)
        float height = 1
        float intensity = 15000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        float width = 1
        quatd xformOp:orient = (0.9996573249755574, 0, -0.026176948307869683, 0)
        double3 xformOp:scale = (0.03, 0.41, 1)
        double3 xformOp:translate = (0.24367, 0, 0.2139308634521206)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def RectLight "RectLight_02" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        color3f color = (0, 0.63106155, 1)
        float height = 1
        float intensity = 15000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        float width = 1
        quatd xformOp:orient = (0.9996573249755574, 0.026176948307869683, 0, 0)
        double3 xformOp:scale = (0.24, 0.03, 1)
        double3 xformOp:translate = (0, 0.3534618682407799, 0.21392999999999837)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def RectLight "RectLight_03" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        color3f color = (0, 0.63106155, 1)
        float height = 1
        float intensity = 15000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        float width = 1
        quatd xformOp:orient = (0.9996573249755574, -0.02617694830786968, 0, 0)
        double3 xformOp:scale = (0.24, 0.03, 1)
        double3 xformOp:translate = (0, -0.35346, 0.21392999999999837)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float angle = 1
        float intensity = 3000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        token visibility = "invisible"
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "Grey_Studio" (
        hide_in_stage_window = false
        no_delete = false
    )
    {
        matrix4d xformOp:transform = ( (0, 1, 0, 0), (0, 0, 1, 0), (1, 0, 0, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Scope "Looks"
        {
            def Material "Ground_Material"
            {
                token outputs:mdl:displacement.connect = </Environment/Grey_Studio/Looks/Ground_Material/Shader.outputs:out>
                token outputs:mdl:surface.connect = </Environment/Grey_Studio/Looks/Ground_Material/Shader.outputs:out>
                token outputs:mdl:volume.connect = </Environment/Grey_Studio/Looks/Ground_Material/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    float inputs:albedo_add = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = -1
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Add"
                        doc = "Adds a constant value to the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_brightness = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Brightness"
                        doc = "Multiplier for the diffuse color "
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (0.05405408, 0.05405354, 0.05405354) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Base Color"
                        doc = "This is the base color"
                        hidden = false
                    )
                    bool inputs:excludeFromWhiteMode = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Exclude from White Mode"
                        hidden = false
                    )
                    token outputs:out
                }
            }
        }

        def Sphere "Sphere"
        {
            float3[] extent = [(-11000, -11000, -11000), (11000, 11000, 11000)]
            bool primvars:doNotCastShadows = 1
            bool primvars:invisibleToSecondaryRays = 1
            double radius = 11000
            custom bool refinementEnableOverride = 1
            custom int refinementLevel = 2
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Mesh "Plane"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 2, 3, 1]
            rel material:binding = </Environment/Grey_Studio/Looks/Ground_Material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-50, 0, -50), (50, 0, -50), (-50, 0, 50), (50, 0, 50)]
            bool primvars:invisibleToSecondaryRays = 0
            float2[] primvars:st = [(1, 0), (1, 1), (0, 1), (0, 0)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            token visibility = "invisible"
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (286.92724609375, 286.92724609375, 286.92724609375)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def DistantLight "DistantLight" (
            apiSchemas = ["ShapingAPI"]
        )
        {
            float angle = 34.3
            float intensity = 3000
            float shaping:cone:angle = 180
            float shaping:cone:softness
            float shaping:focus
            color3f shaping:focusTint
            asset shaping:ies:file
            double3 xformOp:rotateXYZ = (255.70177427072963, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def DomeLight "DomeLight" (
            apiSchemas = ["ShapingAPI"]
        )
        {
            float exposure = 0.4
            float intensity = 1003.3
            float shaping:cone:angle = 180
            float shaping:cone:softness
            float shaping:focus
            color3f shaping:focusTint
            asset shaping:ies:file
            token texture:format = "latlong"
            bool visibleInPrimaryRay = 1
            double3 xformOp:rotateXYZ = (270, -128.27698468300977, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }
    }
}

